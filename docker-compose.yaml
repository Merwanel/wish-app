services:
  api-db:
    build: 
      context: .
      dockerfile: api-db/Dockerfile
    container_name: api-db
    ports:
      - "3000:3000"
    networks:
      - my-net
    restart: on-failure:3
    stop_grace_period: 3s
    depends_on:
      prisma-postgres:
        condition: service_healthy
    command: >
      sh -c "
      echo '🔧 Step 1: Starting virtual display...' && 
      sleep 2 &&
      echo '✅ Step 2: Virtual display started' &&
      echo '🔧 Step 3: Starting migration deployment...' &&
      npx dotenvx run -f .env.docker -- npx prisma migrate deploy &&
      echo '✅ Step 4: Migration deployment completed' &&
      echo '🚀 Step 5: Starting Node.js server... ' &&
      exec npx dotenvx run -f .env.docker -- node ./build/server.js # exec to make node the process to receive SIGINT
      "
    healthcheck:
      test: curl --fail --silent http://localhost:3000/status || exit 1
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 30s


  prisma-postgres:
    image: postgres:17.5-alpine
    container_name: prisma-postgres
    hostname: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"
    networks:
      - my-net
    restart: unless-stopped    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - postgres_data:/var/lib/postgresql/data 


  angular-app:
    build: 
      context: .
      dockerfile: angular-app/Dockerfile
    container_name: angular-app
    ports:
      - "8080:80"
    networks:
      - my-net
    restart: on-failure
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://127.0.0.1/ || exit 1
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 30s
    

  success-message:
    image: alpine:3.22
    container_name: success-message
    networks:
      - my-net
    depends_on:
      api-db :
        condition: service_healthy
      prisma-postgres:
        condition: service_healthy
      angular-app:
        condition: service_healthy
    command: >
      sh -c "
      echo '🎉 BUILD SUCCESS! 🎉' &&
      echo '✅ All services are ready and running!' &&
      echo '🌐 Application is available at: http://localhost:8080' &&
      echo '📡 API server running on: http://localhost:3000' &&
      echo '🗄️  Database running on: localhost:5432'
      "
    restart: "no"


volumes:
  postgres_data:
    driver: local
networks:
  my-net:
    driver: bridge