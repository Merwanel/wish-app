{
  "name": "api-db",
  "version": "1.0.0",
  "description": "",
  "main": "build/server.js",
  "scripts": {
    "dev": "npm run build:dev && docker start prisma-postgres-dev || true && npm run db:init:dev && npx dotenvx run -f .env.dev -- node ./build/server.js",
    "postinstall": "npm run install:headless-browser",
    
    "build": "tsc -p tsconfig.build.json && mkdir -p ./build/init/data && cp src/init/data/* ./build/init/data",
    "build:dev": "npm run container:create:dev && tsc && mkdir -p ./build/init/data && cp src/init/data/* ./build/init/data",
    
    "db:push": "npx dotenvx run -f .env.dev -- npx prisma db push",
    "db:init:dev": "npx dotenvx run -f .env.dev -- npx prisma migrate dev --name init",
    "db:init:test": "npx dotenvx run -f .env.test -- npx prisma migrate dev --name init",
    "db:deploy": "npx prisma migrate deploy && npx prisma generate",
    "db:wipe:dev": "docker exec prisma-postgres-dev psql -d \"postgresql://postgres:mypassword@localhost:5432\" -c \"DROP SCHEMA public CASCADE; CREATE SCHEMA public;\"",
    
    "container:create:dev": " docker create --name prisma-postgres-dev --hostname postgres -e POSTGRES_PASSWORD=mypassword -p 5432:5432  postgres:17.5-alpine 2>/dev/null || true  ",
    "container:create:test": "docker create --rm --name prisma-postgres-test -e POSTGRES_PASSWORD=testpassword -e POSTGRES_DB=testdatabase -p 5433:5432 postgres:17.5-alpine 2>/dev/null || true",
    "container:start:test": "docker start prisma-postgres-test 2>/dev/null",
    "container:stop:test": "docker stop prisma-postgres-test 2>/dev/null || true",
    
    "install:headless-browser": "npx playwright install chromium-headless-shell  ",
    
    "test": "npm run test:setup  && (npm run test:run || exit 1 )",
    "test:setup": "npm run container:stop:test && npm run build:dev && npm run container:create:test && npm run container:start:test && npm run wait:test-db && npm run db:init:test",
    "test:run": "concurrently --kill-others 'npx dotenvx run -f .env.test -- node ./build/server.js' 'npm run wait:server && npx dotenvx run -f .env.test -- npx jasmine' || true",
    
    "wait:server": "until curl -f -s http://localhost:3000/status > /dev/null 2>&1; do printf '\rWaiting for server...' sleep 1; done; echo 'Server is ready!'",
    "wait:test-db": "until docker exec prisma-postgres-test pg_isready -U postgres > /dev/null 2>&1; do echo 'Waiting for test database...'; sleep 1; done; echo 'Test database is ready!'"

  },
  "keywords": [],
  "author": "merwanel",
  "license": "ISC",
  "type": "commonjs",
  "devDependencies": {
    "@types/express": "^5.0.1",
    "@types/jasmine": "^5.1.8",
    "@types/node": "^22.15.18",
    "jasmine": "^5.7.1",
    "prisma": "^6.7.0",
    "tsx": "^4.19.4",
    "typescript": "^5.8.3",
    "concurrently": "^9.2.1"
  },
  "dependencies": {
    "@dotenvx/dotenvx": "^1.44.1",
    "@prisma/client": "^6.7.0",
    "shared-schemas": "1.0.0",
    "cors": "^2.8.5",
    "express": "^5.1.0",
    "minimist": "^1.2.8",
    "playwright": "^1.54.1",
    "playwright-extra": "^4.3.6",
    "puppeteer-extra-plugin-stealth": "^2.11.2",
    "sharp": "^0.34.2",
    "uint8array-extras": "^1.4.0",
    "uuid": "^11.1.0",
    "zod": "^3.25.6"
  }
}